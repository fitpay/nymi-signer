
function Signer(options) {
    var EC = require('elliptic').ec;
    this.ec = new EC('p256');
    this.crypto = require('crypto');
}
module.exports = Signer;

Signer.prototype.sign = function sign(key_bytes, adv_nonce_bytes, terminal_nonce_bytes) {
    var key_bytes = swap_order(key_bytes)

    // Generate keys
    var key = this.ec.keyPair(key_bytes);

    var msg = adv_nonce_bytes.concat(terminal_nonce_bytes);

    var sha256 = this.crypto.createHash('sha256');

    var hashVal = sha256.update(new Buffer(msg)).digest();

    var signature = key.sign(hashVal);

    r = signature.r.toArray();
    s = signature.s.toArray();
    r = swap_order(r);
    s = swap_order(s);

    return [r,s];
}

function swap_order (x) {
    var temp;
    for (var i = 0; i < 8; i++) {
        temp = x[i*4];
        x[i*4] = x[(i+1)*4-1];
        x[(i+1)*4-1] = temp;
        temp = x[i*4+1];
        x[i*4+1] = x[(i+1)*4-2];
        x[(i+1)*4-2] = temp;
    };

    for (var i = 0; i < 4; i++) {
        temp = x.slice(i*4, (i+1)*4);
        for (var j = 0; j < 4; j++) {
            x[i*4 + j] = x[(7-i)*4 + j];
        }
        for (var j = 0; j < 4; j++) {
            x[(7-i)*4 + j] = temp[j];
        }
    };

    return x;
}
